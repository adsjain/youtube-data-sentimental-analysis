package group13.bigdata.youtubedatastream;

import group13.bigdata.youtubedatastream.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.*;
import java.net.*;
import org.json.*;

/**
 * Print a list of videos matching a search term.
 *
 * @author Sharan Girdhani
 */
public class Search {

	/**
	 * Define a global variable that identifies the name of a file that contains
	 * the developer's API key.
	 */
		private static YoutubeDataProducer producer;

	public static void main(String[] args) {
		try {

			// initailize producer class to initalize config
			producer = new YoutubeDataProducer();
			// Prompt the user to enter a query term.
			String queryTerm = getInputQuery();

			URL url = new URL(Constants.VIDEO_BASE_URL + queryTerm + "&key=" + Constants.API_KEY);
			BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
			StringBuffer json = new StringBuffer();
			String line;

			while ((line = reader.readLine()) != null) {
				json.append(line);
			}
			reader.close();

			JSONObject jo = null;

			List<Video> videoList = new ArrayList<Video>();

			try {
				jo = new JSONObject(json.toString());
				JSONArray items = jo.getJSONArray("items");

				for (int i = 0; i < items.length(); i++) {
					JSONObject obj = items.getJSONObject(i);
					String video_title = obj.getJSONObject("snippet").getString("title");
					String video_desc = obj.getJSONObject("snippet").getString("description");
					String video_id = items.getJSONObject(i).getJSONObject("id").getString("videoId");
					ArrayList<Comment> commentList = new ArrayList<Comment>();

					URL url2 = new URL("https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&maxResults="
							+ Constants.NUMBER_OF_COMMENTS_PER_VIDEO + "&videoId=" + video_id + "&key=" + Constants.API_KEY);
					BufferedReader reader2 = new BufferedReader(new InputStreamReader(url2.openStream()));
					StringBuilder json2 = new StringBuilder();
					String line2 = null;

					while ((line2 = reader2.readLine()) != null) {
						json2.append(line2);
					}
					reader2.close();

					JSONObject comments = null;
					try {
						comments = new JSONObject(json2.toString());
						json2.setLength(0);
						JSONArray items2 = comments.getJSONArray("items");
						// System.out.println(items);

						for (int j = 0; j < items2.length(); j++) {
							String comment_text = null;
							boolean isOriginalText = items2.getJSONObject(j).getJSONObject("snippet")
									.getJSONObject("topLevelComment").getJSONObject("snippet").has("textOriginal");
							if (isOriginalText)
							{
								comment_text = items2.getJSONObject(j).getJSONObject("snippet")
										.getJSONObject("topLevelComment").getJSONObject("snippet")
										.getString("textOriginal");
								Comment com = new Comment(comment_text);
								StringJoiner joiner = new StringJoiner("|");
								joiner.add(video_id).add(video_title).add(video_desc).add(comment_text);
								 producer.produceYouTubeData(Constants.TOPIC_NAME,joiner.toString());
								commentList.add(com);

							}
													}
					} catch (JSONException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					Video video = new Video(video_id, video_title, video_desc, commentList);
					videoList.add(video);
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (IOException e) {
			System.err.println(
					"There was an error reading "  + ": " + e.getCause() + " : " + e.getMessage());
			System.exit(1);
		}
	}

	/*
	 * Prompt the user to enter a query term and return the user-specified term.
	 */
	private static String getInputQuery() throws IOException {

		String inputQuery = "";

		System.out.print("Please enter a search term: ");
		BufferedReader bReader = new BufferedReader(new InputStreamReader(System.in));
		inputQuery = bReader.readLine();

		if (inputQuery.length() < 1) {
			// Use the string "Big Data" as a default.
			inputQuery = "Big+Data";
		}
		return inputQuery;
	}
}